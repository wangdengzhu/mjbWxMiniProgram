// pages/cart/cartList.js

const { postCartList, updateCartListSelect, updateCartListNum, updateCartDel } = require('../../apis/cart.js');
const app = getApp();

app.Page({
  /**
   * 页面的初始数据
   */
  data: {
    showView: false,
    setNumber: false,
    shopid: 0,
    cartList: [],   // 全部的购物车商品
    cartList2: [],  // 购物车有货的商品
    cartList3: [],  // 购物车无货的商品
    defaultX: 0,
    startX: 0,
    move: 0,
    allSelect: false,
    selectPiece: 0,
    allPrice: 0,
    cartNum: 0,
    storageContent: null,
  },
  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    let that = this;
    let cartlist = wx.getStorageSync("CartList");
    let shopid = app.globalData.shopid;
    let list;

    if (cartlist) {
      cartlist = JSON.parse(cartlist);
      list = cartlist[shopid] || [];
    } else {
      cartlist = {};
      list = [];
    }
    
    if (app.globalData.userInfo) {
      postCartList(list).then(function(res){
        dataPro(res)
        cartlist[shopid] = [];
        wx.setStorageSync("CartList", JSON.stringify(cartlist));
      })
    } else {
      postCartList(list).then(function(res){
        dataPro(res)
      })
    }
    
    this.setData({
      shopid: shopid,
      storageContent: cartlist,
    })
    
    function dataPro(res) {
      if (!res) {
        return;
      }
      res.list.map(function(v){
        v.salesprice = that.setZero(v.salesprice);
        v.left = 0;
      })
      // 有货的商品
      let list2 = res.list.filter(function(v){
        return v.stock > 0 && v.isvalid
      })

      // 无货的商品
      let list3 = res.list.filter(function(v){
        return v.stock == 0 || !v.isvalid 
      })

      that.setData({
        cartList: res.list,
        cartList2: list2,
        cartList3: list3,
      })

      let allSelect = res.list.filter(function(v){
        return v.isselect == true
      })
  
      if (allSelect.length == res.list.length) {
        that.setData({
          allSelect: true
        })
      }
      
      that.setData({
        showView: true,
        selectPiece: allSelect.length,
      })
      that.totalPrice();
    }

  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {

  },
  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
    
  },

  // 跳转分类页面
  goCategory: function () {
    wx.switchTab({
      url: '/pages/index/index'
    })
  },

  // 选择商品
  selectHandler: function (e){
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;
    let stroage = this.data.storageContent;
    if (list[idx].isselect) {
      list[idx].isselect = false;
    } else {
      list[idx].isselect = true;
    }
    let selectAll = list.filter(function(v){
      return v.isselect == true
    })
    
    if (selectAll.length == list.length) {
      this.setData({
        allSelect: true,
      })
    } else {
      this.setData({
        allSelect: false,
      })
    }

    this.setData({
      cartList: list,
      selectPiece: selectAll.length,
    });
    this.totalPrice();

    if (app.globalData.userInfo) {
      updateCartListSelect(list,false).then(function(res){
        // ...
      })
    } else {
      let that = this;
      if (stroage) {
        stroage[that.data.shopid] = that.storageChange(list);
        wx.setStorageSync("CartList", JSON.stringify(stroage));
      } else {
        wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(list)}));
      }
    }

  },

  // 选择删除商品
  selectHandler2: function (e) {
    let that = this;
    let idx = e.currentTarget.dataset.index;
    let list = that.data.cartList;
    let list3 = that.data.cartList3;
    let delSkuid = list3[idx].skuid;
    wx.showModal({
      content: '确定删除该失效商品？',
      confirmColor: '#FF681D',
      success: function(res) {
        if (res.confirm) {
          list3.splice(idx, 1);
          that.setData({
            cartList3: list3
          })
          
          let delList = list.filter(function(v){
            return v.skuid != delSkuid;
          })

          if (app.globalData.userInfo) {
            updateCartDel(delList,false).then(function(res){
              // ...
            })
          } else {
            if (stroage) {
              stroage[that.data.shopid] = that.storageChange(delList);
              wx.setStorageSync("CartList", JSON.stringify(stroage));
            } else {
              wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(delList)}));
            }
          }
        } else if (res.cancel) {
          console.log('用户点击取消')
        }
      }
    })



  },

  // 储存改变状态，数量后的购物车数据
  storageChange: function (list) {
    let cartArr = [];
    for (let i=0; i<list.length; i++) {
      cartArr.push({
        goodsprice: list[i].goodsprice,
        isselect: list[i].isselect,
        shopnum: list[i].shopnum,
        skuid: list[i].skuid,
      })
    }
    return cartArr
  },

  // 删除商品
  delHandler: function (e) {
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;
    let stroage = this.data.storageContent;
    list.splice(idx, 1)
    let cart = list.filter(function(v){
      return v.isselect == true
    })
    this.setData({
      cartList: list,
      selectPiece: cart.length,
    })
    this.totalPrice();
    if (app.globalData.userInfo) {
      updateCartDel(list,false).then(function(res){
        // ...
      })
    } else {
      let that = this;
      if (stroage) {
        stroage[that.data.shopid] = that.storageChange(list);
        wx.setStorageSync("CartList", JSON.stringify(stroage));
      } else {
        wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(list)}));
      }
    }
  },

  // 滑动开始
  startHandler: function (e){
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;
    // 初始化坐标和获取组件默认left
    this.setData({
      startX: e.touches[0].pageX,
      defaultX: list[idx].left,
    });
    this.hideDelBtn(e);
  },

  // 滑动中
  moveHandler: function (e){
    let that = this.data;
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;

    // 获取移动距离
    let x = e.touches[0].pageX - that.startX;
    
    // 如果left值为0，组件只能左移
    if (that.defaultX == 0 && x < 0) {
      if (x < -120) {
        list[idx].left = -120;
      } else {
        list[idx].left = x;
      }
    }

    // 如果left值为-120，组件只能右移
    if (that.defaultX == -120 && x > 0) {
      if (x > 120) {
        list[idx].left = 0;
      } else {
        list[idx].left = that.defaultX + x;
      }
    }

    this.setData({
      cartList: list,
      move: x,
    })
  },
  
  // 滑动结束
  endHandler: function (e){
    let that = this.data;
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;

    // 判断移动距离是否超过60；给予组件优化移动效果

    if (that.defaultX == 0 && that.move > -60) {
      list[idx].left = 0;
    }

    if (that.defaultX == 0 && that.move <= -60) {
      list[idx].left = -120;
    }

    if (that.defaultX == -120 && that.move < 60) {
      list[idx].left = -120;
    }

    if (that.defaultX == -120 && that.move >= 60) {
      list[idx].left = 0;
    }

    this.setData({
      cartList: list,
      startX: 0,
      move: 0,
    })
  },

  // 选择全部
  selectAllHandler: function () {
    let list = this.data.cartList;
    let sel = this.data.allSelect;
    let stroage = this.data.storageContent;
    if (sel) {
      list.map(function(v){
        if (v.isselect == true) {
          v.isselect = false;
        }
      })
      sel = false;
    } else {
      list.map(function(v){
        if (v.isselect == false) {
          v.isselect = true;
        }
      })
      sel = true;
    }
    
    let allSelect = list.filter(function(v){
      return v.isselect == true
    })

    this.setData({
      cartList: list,
      allSelect: sel,
      selectPiece: allSelect.length
    })
    this.totalPrice();
    if (app.globalData.userInfo) {
      updateCartListSelect(list,false).then(function(res){
        // ...
      })
    } else {
      let that = this;
      if (stroage) {
        stroage[that.data.shopid] = that.storageChange(list);
        wx.setStorageSync("CartList", JSON.stringify(stroage));
      } else {
        wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(list)}));
      }
    }
  },

  // 设置商品数量
  getNum: function (e) {
    let that = this;
    let val = e.detail.value;
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;
    let stroage = this.data.storageContent;
    list[idx].shopnum = val;
    if (!this.data.showView) {
        return;
    }
    this.setData({
      cartList: list,
      onFocus: true,
    })
    this.totalPrice();

    if (this.data.setNumber) {
      return;
    }
    if (app.globalData.userInfo) {
      // 处理发送多次请求
      this.setData({
        setNumber: true
      })
      updateCartListNum(list,false).then(function(res){
        that.setData({
          setNumber: false
        })
      })
    } else {
      let that = this;
      if (stroage) {
        stroage[that.data.shopid] = that.storageChange(list);
        wx.setStorageSync("CartList", JSON.stringify(stroage));
      } else {
        wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(list)}));
      }
    }
  },

  // 结算
  cartPay: function (e) {
    let list = this.data.cartList;
    let select = list.filter(function(v){
      return v.isselect == true
    })

    if (!e.detail.rawData) {
      return;
    }

    if (select.length == 0) {
      wx.showToast({
        title: '请选择结算商品',
        icon: 'none',
        duration: 2000
      })
      return;
    }

    let stock = list.filter(function(v){
      return v.stock < v.shopnum && v.isselect == true
    })
    
    if (stock.length > 0) {
      wx.showToast({
        title: '请更改库存不足商品数量',
        icon: 'none',
        duration: 2000
      })
      return;
    }

    if (app.globalData.userInfo){
        wx.navigateTo({
          url: '/pages/order/submitOrder/submitOrder'
        })
      }else{
        wx.navigateTo({
          url: `/pages/bind/bind`
        })
      }

  },

  // 总价
  totalPrice: function () {
    let list = this.data.cartList;
    let total = 0;
    for (let i=0; i<list.length; i++) {
      if (list[i].isselect) {
        total += parseFloat(list[i].salesprice) * list[i].shopnum;
      }
    }
    let price = this.setZero(total)
    if (price.length - price.indexOf('.') > 3) {
      price = price.substring(0, price.indexOf('.')+3)
    } 
    this.setData({
      allPrice: price
    })
  },

  // 补零
  setZero:function (p) {
    let price = p.toString();
    
    if (price.indexOf('.') == -1) {
      return price = price + '.00'
    }

    if (price.length - price.indexOf('.') == 2) {
      return price = price + '0'
    }

    return price;
  },

  // 点击其他商品，隐藏已显示的删除按钮
  hideDelBtn: function (e) {
    let idx = e.currentTarget.dataset.index;
    let list = this.data.cartList;
    list.map(function(v,i){
      if ( i!= idx) {
        v.left = 0;
      }
    })
    this.setData({
      cartList: list,
    })
  },

  // 进入商品详情
  showDetails: function (e) {
    let spuid = e.currentTarget.dataset.goodsid;
    wx.redirectTo({
        url: `/pages/goods/goodsDetail/goodsDetail?spuid=${spuid}`
    })
  },

  // 清除失效商品
  clearAllNoStock: function (e) {
    let list = this.data.cartList2;
    wx.showModal({
      content: '确定清空所有失效商品？',
      confirmColor: '#FF681D',
      success: function(res) {
        if (res.confirm) {
          this.setData({
            cartList3: [],
          })
          if (app.globalData.userInfo) {
            updateCartDel(list).then(function(res){
              // ...
            })
          } else {
            let that = this;
            if (stroage) {
              stroage[that.data.shopid] = that.storageChange(list);
              wx.setStorageSync("CartList", JSON.stringify(stroage));
            } else {
              wx.setStorageSync("CartList", JSON.stringify({[that.data.shopid]: that.storageChange(list)}));
            }
          }
        } else if (res.cancel) {
          console.log('用户点击取消')
        }
      }
    })
  },


  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})